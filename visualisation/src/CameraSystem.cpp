#include "CameraSystem.h"
#include "../../input/HWEventReceiver.h"

#include <IMGUI/imgui.h>
#include <chrono_irrlicht/ChIrrTools.h>
#include <iostream>


bool CameraSystem::sInitialised = false;
float CameraSystem::sAspectRatio = 1.0f;
irr::scene::ICameraSceneNode* CameraSystem::sIrrlichtCam = nullptr;
std::vector<CameraSystem::CameraHandle> CameraSystem::sCameraHandles;
CameraSystem::CameraHandle CameraSystem::sActiveCamera;


void CameraSystem::init(irr::scene::ISceneManager& sceneMgrHandle) {
    sIrrlichtCam = sceneMgrHandle.addCameraSceneNode();
    sIrrlichtCam->setPosition({0, 0, 0});
    sceneMgrHandle.setActiveCamera(sIrrlichtCam);
    sInitialised = true;
}


void CameraSystem::handleInput() {
    // todo: cycle cameras
    // NOTE: This function should only be concerned with cycling through the currently bound cameras.
    // Whether or not the CameraSystem has focus should be handled at a higher level.
}


void CameraSystem::setAspectRatio(float aspectRatio) {
    sAspectRatio = aspectRatio;
}


void CameraSystem::updateIrrlichtCamera() {
    // Updates the state of the internal irrlicht camera based on the currently bound `CameraBaseState`.
    const CameraBaseState* current = sActiveCamera.handle;

    sIrrlichtCam->setUpVector(irr::core::vector3dfCH(current->up));
    sIrrlichtCam->setTarget(irr::core::vector3dfCH(current->lookAt));
    sIrrlichtCam->setNearValue(current->nearValue);
    sIrrlichtCam->setFarValue(current->farValue);
    sIrrlichtCam->setFOV(irr::core::degToRad(current->verticalFOV));

    // Currently, there is only one camera view shown on screen at a time, and the image generated by this camera always
    // fills the screen. Hence it makes sense that this class should hold one variable for a 'main' aspect ratio, and
    // all camera views should use this variable. The currently bound camera's 'aspectRatio' variable is ignored.
    //
    // However in the future, the plan is to add multiple camera views with different aspect ratios, at which point
    // `current->aspectRatio` should be used here.
    sIrrlichtCam->setAspectRatio(sAspectRatio);
}


void CameraSystem::registerHandleTo(CameraBaseState& cameraState, const std::string& name) {
    sCameraHandles.push_back({name, &cameraState});
    sActiveCamera = sCameraHandles.back();
}


chrono::ChVector<> CameraSystem::getActiveCameraPos() {
    return sActiveCamera.handle->position;
}
